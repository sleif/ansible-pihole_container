---

- name: open ports for dns
  ansible.posix.firewalld:
    service: dns
    immediate: true
    permanent: true
    state: enabled
  when:
    - ansible_os_family == "RedHat"
  tags: firewall

- name: Populate service facts
  ansible.builtin.service_facts:

# TODO prefill /srv/pihole/dnsmasq.d/99-pihole.conf with further server entries (as in 01-pihole.conf)
- name: disable systemd-resolved  # noqa: ignore-errors
  ansible.builtin.service:
    name: systemd-resolved
    state: stopped
    enabled: false
  when:
    - ansible_facts['services']['systemd-resolved.service'] is defined

# - name: enable fallback nameserver in resolv.conf
#   ansible.builtin.lineinfile:
#     path: /etc/resolv.conf
#     regexp: "{{ item.regexp }}"
#     line: "{{ item.line }}"
#   with_items:
#     - {regexp: '^nameserver 1\.1.1\.1', line: 'nameserver 1.1.1.1'}

- name: Include podman_init_vars.yml from sleif.podman
  ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: sleif.podman/tasks/includes/podman_init_vars.yml
      paths: "{{ lookup('config', 'DEFAULT_ROLES_PATH') }}"

- name: old local.list needs to be removed before container start
  ansible.builtin.file:
    dest: "{{ _container_storage_dir_base_local }}/pihole/pihole/local.list"
    state: absent

- name: add DHCP port to published ports
  ansible.builtin.set_fact:
    container_published_ports: "{{ container_published_ports + [pihole_container_published_port_dhcp ~ ':67/udp'] }} "
  when:
    - pihole_dhcp_enabled | bool

- name: Set additional facts
  ansible.builtin.set_fact:
    _pihole_etc_dir: "{{ _container_storage_dir_base_local }}/{{ container_name }}/pihole"
    _dnsmasq_etc_dir: "{{ _container_storage_dir_base_local }}/{{ container_name }}/dnsmasq.d"

- name: Create persistant container directories  # noqa: ignore-errors
  become: "{{ podman_rootless | bool }}"
  become_method: containers.podman.podman_unshare
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0775'
  loop:
    - "{{ _pihole_etc_dir }}"
    - "{{ _dnsmasq_etc_dir }}"
  ignore_errors: true

- name: provide DNS overrides  # noqa: ignore-errors
  become: "{{ podman_rootless | bool }}"
  become_method: containers.podman.podman_unshare
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.copy:
    dest: "{{ _dnsmasq_etc_dir }}/99-self-managed.conf"
    content: "{{ pihole_dnsmasq_custom_config }}"
    mode: '0644'

- name: include_role sleif.podman podman_operation podman_create_container for pihole
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_container_create
  vars:
    # podman_rootless: true
    # podman_network_name: "{{ podman_networks.podman_network_rootless.podman_network_name if podman_rootless | bool else
    #   podman_networks.podman_network_root.podman_network_name }}"
    podman_operation: podman_container_create
    container_name: '{{ pihole_container_name }}'
    target: "{{ pod_name if pod_name | d('') is truthy else pihole_container_name }}"
    _container:
      name: '{{ container_name }}'
      image:
        name: "{{ pihole_container_image }}"
        tag: "{{ pihole_container_image_tag }}"
      network: "slirp4netns:port_handler=slirp4netns"
      publish: '{{ container_published_ports | default([]) }}'
      volumes:
        - {'host': '{{ _pihole_etc_dir }}', 'target': '/etc/pihole/:Z', 'mode': '0775'}
        - {'host': '{{ _dnsmasq_etc_dir }}', 'target': '/etc/dnsmasq.d/:Z', 'mode': '0775'}
      capabilities:
        - NET_ADMIN
      secrets:
        - {name: 'pihole_webpassword', data: '{{ pihole_password }}'}
      env:
        # https://github.com/pi-hole/docker-pi-hole#environment-variables
        ServerIP: "{{ ansible_default_ipv4.address }}"
        WEBPASSWORD_FILE: "/run/secrets/pihole_webpassword"
        PIHOLE_DNS_: "1.1.1.1;1.0.0.1"
        CORS_HOSTS: "{{ pihole_fqdn }}"
        VIRTUAL_HOST: "{{ pihole_fqdn }}"
        INTERFACE: "{{ 'tap0' if 'slirp4netns' in podman_network_name else 'eth0' }}"
        TZ: "Europe/Berlin"
      timezone: "Europe/Berlin"
  tags: podman_container_create

- name: waiting for pihole startup (40 sec)  # noqa: no-handler
  ansible.builtin.wait_for:
    timeout: 40
  when:
    - _podman_container_create_changed | bool

# - name: pihole | set pihole password  # noqa: no-handler
#   become: "{{ podman_rootless | d(true) | bool }}"
#   become_user: "{{ podman_user if podman_rootless | d(true) | bool else omit }}"
#   containers.podman.podman_container_exec:
#     name: "{{ container_name }}"
#     command: /usr/local/bin/pihole -a -p "{{ pihole_password }}"
#   when:
#     - _container_create_results.changed | bool
# - name: pihole | set pihole password
#   ansible.builtin.command: podman exec -ti pihole /usr/local/bin/pihole -a -p "{{ pihole_password }}"

- name: pihole configuration file
  become: "{{ podman_rootless | d(true) | bool }}"
  become_method: containers.podman.podman_unshare
  become_user: "{{ podman_user if podman_rootless | d(true) | bool else omit }}"
  ansible.builtin.lineinfile:
    path: "{{ _pihole_etc_dir }}/setupVars.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    # - { regexp: '^WEBPASSWORD.*', line: 'WEBPASSWORD={{ pihole_password_encrypted }}'}
    - {regexp: '^.*REV_SERVER=', line: 'REV_SERVER={{ pihole_rev_server | lower }}'}

- name: pihole configuration file - cond forward
  become: "{{ podman_rootless | d(true) | bool }}"
  become_method: containers.podman.podman_unshare
  become_user: "{{ podman_user if podman_rootless | d(true) | bool else omit }}"
  ansible.builtin.lineinfile:
    path: "{{ _pihole_etc_dir }}/setupVars.conf"
    state: "{% if pihole_rev_server %}present{% else %}absent{% endif %}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - {regexp: '^.*REV_SERVER_TARGET=', line: 'REV_SERVER_TARGET={{ pihole_rev_server_target }}'}
    - {regexp: '^.*REV_SERVER_DOMAIN=', line: 'REV_SERVER_DOMAIN={{ pihole_rev_server_domain }}'}
    - {regexp: '^.*REV_SERVER_CIDR=', line: 'REV_SERVER_CIDR={{ pihole_rev_server_cidr }}'}
  when: pihole_rev_server | bool

- name: pihole whitelist file  # noqa: no-handler
  become: "{{ podman_rootless | d(true) | bool }}"
  become_user: "{{ podman_user if podman_rootless | d(true) | bool else omit }}"
  containers.podman.podman_container_exec:
    name: "{{ container_name }}"
    command: /usr/local/bin/pihole -w "{{ item }}"
  loop: "{{ pihole_whitelist_entries }}"
  register: _whitelist_result
  changed_when:
    - not "already exists in whitelist" in _whitelist_result.stdout

- name: Redirect DNS port to pihole
  ansible.posix.firewalld:
    rich_rule: "{{ item }}"
    zone: public
    permanent: true
    immediate: true
    state: "enabled"
  loop:
    - "rule family=ipv4 forward-port port=53 protocol=tcp to-port={{ pihole_container_published_port_dns }}"
    - "rule family=ipv4 forward-port port=53 protocol=udp to-port={{ pihole_container_published_port_dns }}"
  when:
    - pihole_container_published_port_dns != "53"

- name: Redirect DHCP port to pihole
  ansible.posix.firewalld:
    rich_rule: "{{ item }}"
    zone: public
    permanent: true
    immediate: true
    state: "enabled"
  loop:
    - "rule family=ipv4 forward-port port=67 protocol=udp to-port={{ pihole_container_published_port_dhcp }}"
  when:
    - pihole_container_published_port_dhcp != "67"

# - name: disable fallback nameserver in resolv.conf
#   ansible.builtin.lineinfile:
#     path: /etc/resolv.conf
#     regexp: "{{ item.regexp }}"
#     line: "{{ item.line }}"
#     state: absent
#   with_items:
#     - {regexp: '^nameserver 1\.1\.1\.1', line: 'nameserver 1.1.1.1'}
